local StringBuilder = require("../utils/string-builder")
local config = require("./config")
local fs = require("@lune/fs")
local mkdocs = require("./templates/mkdocs.yaml")
local path = require("../utils/path")
local process = require("@lune/process")
local serde = require("@lune/serde")

local PATH_DOCS = path(process.cwd, "docs")
local PATH_SRC = path(process.cwd, "src")
local TEMPLATE_INDEX = path(process.cwd, ".lune", "generate-docs", "templates", "index.md")

local function reset(dir: string)
  if not fs.isDir(dir) then
    fs.writeDir(dir)
  else
    for _, file in fs.readDir(dir) do
      if fs.isFile(path(dir, file)) then
        fs.removeFile(path(dir, file))
      end
    end
  end
end

local function generateDocs()
  reset(PATH_DOCS)

  local utils = {}
  local srcFiles = fs.readDir(PATH_SRC)
  table.sort(srcFiles)
  for _, dir in fs.readDir(PATH_SRC) do
    local dirPath, configPath = path(PATH_SRC, dir), path(PATH_SRC, dir, "doc.toml")
    if not fs.isDir(dirPath) or not fs.isFile(configPath) then
      continue
    end

    local config = config.intoConfig(serde.decode("toml", fs.readFile(configPath))).config
    table.insert(utils, {
      dir = dir,
      config = config,
    })
  end

  local firstList, secondList, indexUtils, pages = {}, {}, {}, {}
  for index, util in utils do
    print("Processing", util.config.name)

    local code = StringBuilder():append("function", util.config.name)
    local codeDocumentation = StringBuilder()
    do
      if util.config.variadics then
        code:append(`<{table.concat(util.config.variadics, ", ")}>`)
      end
      code:appendLine("("):indent()

      if util.config.args then
        codeDocumentation
          :appendLine()
          :appendLine("---")
          :appendLine()
          :appendLine("## Arguments")
          :appendLine()
          :appendLine("| Name     | Type     | Description          |")
          :appendLine("| -------- | -------- | -------------------- |")

        local args = {}
        for _, arg in util.config.args do
          table.insert(args, `{arg.name}: {arg.type}`)
          codeDocumentation
            :append("|", arg.name, "|", `\`#!luau {arg.type}\``, "|", arg.description, "|")
            :appendLine()
        end
        code:appendLine(table.concat(args, ",\n"))
      end
      code:unIndent():append("):")

      if util.config.returns then
        code:append(" "):append(util.config.returns.type)

        codeDocumentation
          :appendLine()
          :appendLine("---")
          :appendLine()
          :appendLine("## Returns")
          :appendLine()
          :appendLine("| Type     | Description                  |")
          :appendLine("| -------- | ---------------------------- |")
          :appendLine(
            "|",
            `\`#!luau {util.config.returns.type}\``,
            "|",
            util.config.returns.description,
            "|"
          )
      end

      if util.config.example then
        codeDocumentation
          :appendLine()
          :appendLine("---")
          :appendLine()
          :appendLine("## Example")
          :appendLine()
          :appendLine("```Luau")
          :appendLine(util.config.example)
          :appendLine("```")
      end
    end

    table.insert(
      index % 2 == 0 and firstList or secondList,
      StringBuilder("<li> <a ")
        :append(`href="{util.dir}">`)
        :append(util.config.name)
        :append("</a></li>")
        :build()
    )

    table.insert(
      indexUtils,
      StringBuilder("<section>\n")
        :appendLine(`<a href="./{util.dir}/">`)
        :appendLine("<h2>", util.config.name, "</h2>")
        :appendLine(util.config.brief)
        :appendLine("</a>")
        :appendLine("</section>")
        :build()
    )

    local usefulFor = StringBuilder()
    if util.config.useful_for then
      usefulFor:append("Useful for", util.config.useful_for)
    end

    pages[util] = StringBuilder()
      :appendLine("<!-- This file was autogenerated. It is not intended for manual editing. -->")
      :appendLine("<!-- Run `lune run generate-docs` to generate a fresh index file. -->")
      :appendLine()
      :appendLine("#", util.config.name)
      :appendLine()
      :appendLine("```Luau")
      :appendLine(code:build())
      :appendLine("```")
      :appendLine()
      :appendLine(util.config.brief)
      :appendStringBuilder(usefulFor)
      :appendLine(codeDocumentation:build())
      :build()

    fs.writeFile(
      path(PATH_SRC, util.dir, "README.md"),
      StringBuilder()
        :appendLine("<!-- This file was autogenerated. It is not intended for manual editing. -->")
        :appendLine("<!-- Run `lune run generate-docs` to generate a fresh README. -->")
        :appendLine()
        :appendLine("#", util.config.name)
        :appendLine()
        :appendLine("```Luau")
        :appendLine(code:build())
        :appendLine("```")
        :appendLine()
        :appendLine(util.config.brief)
        :appendStringBuilder(usefulFor)
        :appendLine(codeDocumentation:build())
        :build()
    )
  end

  table.sort(firstList)
  table.sort(secondList)
  table.sort(indexUtils)

  local newMkdocs, nav: any = table.clone(mkdocs), {}
  table.insert(nav, "index.md")

  for util, content in pages do
    fs.writeFile(path(PATH_DOCS, `{util.dir}.md`), content)
    -- fs.writeFile(
    --   path(PATH_DOCS, `{util.dir}.md`),
    --   StringBuilder(fs.readFile(path(PATH_DOCS, `{util.dir}.md`)))
    --     :appendLine("---")
    --     :appendLine()
    --     :appendLine("## More Utils")
    --     :appendLine()
    --     :appendLine('<section class="grid pfu-utils-grid" markdown>')
    --     :appendLine(table.concat(indexUtils, "\n\n"))
    --     :appendLine("</section>")
    --     :build()
    -- )
    table.insert(nav, {
      [util.config.name] = `{util.dir}.md`,
    })
  end

  table.sort(nav, function(first, second)
    if typeof(first) == "string" then
      return true
    end
    if typeof(second) == "string" then
      return false
    end
    return next(first) < next(second)
  end)

  newMkdocs.nav = {
    {
      Home = nav,
    },
  }

  local index = fs.readFile(TEMPLATE_INDEX)
  index = index:gsub("%$utils%-grid", table.concat(indexUtils, "\n\n"))
  index = index:gsub("%$utils%-list%-1", table.concat(firstList, "\n\n"))
  index = index:gsub("%$utils%-list%-2", table.concat(secondList, "\n\n"))

  fs.writeFile(path(PATH_DOCS, "index.md"), index)
  fs.writeFile(
    path(process.cwd, "mkdocs.yaml"),
    StringBuilder()
      :appendLine("# This file was autogenerated. It is not intended for manual editing.")
      :appendLine("# Run `lune run generate-docs` to generate a fresh configuration file.")
      :appendLine()
      :appendLine("# Edit the configuration at `.lune/generate-docs/templates/mkdocs.yaml.luau`")
      :appendLine()
      :appendLine(serde.encode("yaml", newMkdocs))
      :build()
  )
end

return generateDocs
