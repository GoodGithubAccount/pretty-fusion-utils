[config]
  name = "usePrevious"
  brief = """\
  Returns a state object with the previous value of an observable state \
  object. Initially outputs `nil`.\
  """

  example = '''
local function randomColor(): Color3
  return Color3.fromHSV(math.random(0, 360), 0.75, 1)
end

local currentColor = scope:Value(randomColor())
local previousColor = scope:usePrevious(currentColor)

scope:useInterval(1, function()
  currentColor:set(randomColor)
end)

scope:Observer(currentColor):onChange(function()
  print("Current color:", peek(currentColor), "Previous color:", peek(previousColor))
end)'''

  variadics = ["T"]

[[config.args]]
  name = "scope"
  type = "Fusion.Scope"
  description = "The scope to store cleanup tasks."

[[config.args]]
  name = "state"
  type = "Fusion.StateObject<T>"
  description = "The state object to observe for changes."

[[config.args]]
  name = "predicate"
  type = "((T, T) -> boolean)?"
  description = "The predicate function to assert if the value is newer. Defaults to Fusion's similarity rules."

[config.returns]
  type = "Fusion.StateObject<T>"
  description = "A state object with the previous value of the state object. Initially outputs `nil`."
