[config]
  name = "usePrevious"
  brief = """\
  Returns a state object with the previous value of an observable state \
  object. Initially outputs `nil`.\
  """
  example = '''
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Fusion = require(ReplicatedStorage.Packages.Fusion)
local fusionUtils = require(ReplicatedStorage.Packages.fusionUtils)

local Children, Child, OnEvent = Fusion.Children, Fusion.Child, Fusion.OnEvent

local function randomColor(): Color3
    return Color3.fromHSV(math.random(0, 360), 0.75 0.75)
end

local function App(scope: Fusion.Scope<typeof(Fusion) & typeof(fusionUtils)>)
    local currentColor = scope:Value(randomColor())
    local previousColor = scope:usePrevious(currentColor)

    return scope:New "Frame" {
        AnchorPoint = Vector2.new(0.5, 0.5),
        Size = UDim2.fromScale(0.5, 0.5),
        Position = UDim2.fromScale(0.5, 0.5),

        [Children] = Child {
            scope:New "TextLabel" {
                Text = "usePrevious",
                Size = UDim2.fromScale(1, 0.25),
            },
            scope:New "TextButton" {
                Text = "Next",
                Size = UDim2.fromScale(1, 0.25),
                Position = UDim2.fromScale(0, 0.25),

                [OnEvent "Activated"] = function()
                    currentColor:set(randomColor())
                end
            },
            scope:New "Frame" {
                BackgroundColor3 = currentColor,
                Size = UDim2.fromScale(0.5, 0.5),
                Position = UDim2.fromScale(0, 0.5),
            },
            scope:New "Frame" {
                BackgroundColor3 = scope:Computed(function(use))
                    return use(previousColor) or Color3.new()
                end),
                Size = UDim2.fromScale(0.5, 0.5),
                Position = UDim2.fromScale(0.5, 0.5),
            }
        }
    }
end

return App'''

  variadics = ["T"]

[[config.args]]
  name = "scope"
  type = "Scope"
  description = "The scope to store cleanup tasks."

[[config.args]]
  name = "state"
  type = "StateObject<T>"
  description = "The state object to observe for changes."

[[config.args]]
  name = "predicate"
  type = "((T, T) -> boolean)?"
  description = "The predicate function to assert if the value is newer. Defaults to Fusion's similarity rules."

[config.returns]
  type = "StateObject<T?>"
  description = "A state object with the previous value of the state object."
