{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Index","text":"pretty fusion utils"},{"location":"#pretty-fusion-utils","title":"pretty fusion utils","text":"<p> An opinionated collection of modern  Fusion 0.3 utilities. </p> <pre><code>fusionUtils = \"znotfireman@pretty-fusion-utils@0.1.0\"\n</code></pre> <ul> <li> useEffect</li> <li> useEvent</li> <li> usePx</li> <li> useTasks</li> <li> useViewport</li> </ul> <ul> <li> useAsync</li> <li> useCamera</li> <li> useMouse</li> <li> usePrevious</li> <li> useTagged</li> <li> useTimer</li> </ul>"},{"location":"#useasync","title":"useAsync","text":"Returns a state object with an value from an asynchronous processor. The processor is given a Use callback that adds dependencies, a Become callback alter the current eventual value, and an inner scope to add cleanup tasks to."},{"location":"#usecamera","title":"useCamera","text":"Returns a state object with the current camera. Updates when the current camera changes."},{"location":"#useeffect","title":"useEffect","text":"Perform side effects with state objects."},{"location":"#useevent","title":"useEvent","text":"Connects to an event-like object. The connection is automatically disconnected when the scope is cleaned up."},{"location":"#usemouse","title":"useMouse","text":"Returns a state object with the mouse position. Updates when the mouse position changes."},{"location":"#useprevious","title":"usePrevious","text":"Returns a state object with the previous value of an observable state object. Initially outputs `nil`."},{"location":"#usepx","title":"usePx","text":"Returns a state object with the current `px` unit based on the current viewport size."},{"location":"#usetagged","title":"useTagged","text":"Returns a state object with every instance of a given tag. Updates when new instances get tagged or old instances get untagged."},{"location":"#usetasks","title":"useTasks","text":"Add clean up tasks to the scope. Returns the clean up tasks, allowing it to be used in declarations."},{"location":"#usetimer","title":"useTimer","text":"Creates a timer that can be used to track a value over time."},{"location":"#useviewport","title":"useViewport","text":"Returns the current viewport size. Updates when the current camera changes or when the viewport size is changed."},{"location":"use-async/","title":"useAsync","text":""},{"location":"use-async/#useasync","title":"useAsync","text":"<pre><code>function useAsync&lt;Scope, Result&gt;(\n  scope: Scope &amp; Fusion.Scope,\n  fallback: Result,\n  processor: (use: Fusion.Use, become: Become, scope: Scope) -&gt; Result\n): StateObject&lt;Result&gt;\n</code></pre> <p>Returns a state object with an value from an asynchronous processor. The processor is given a Use callback that adds dependencies, a Become callback alter the current eventual value, and an inner scope to add cleanup tasks to.</p>"},{"location":"use-async/#arguments","title":"Arguments","text":""},{"location":"use-async/#scope-scope-fusionscope","title":"scope <code>: Scope &amp; Fusion.Scope</code>","text":"<p>The scope to store cleanup tasks.</p>"},{"location":"use-async/#fallback-result","title":"fallback <code>: Result</code>","text":"<p>The fallback value to display while the processor runs.</p>"},{"location":"use-async/#processor-use-fusionuse-become-become-scope-scope-result","title":"processor <code>: (use: Fusion.Use, become: Become, scope: Scope) -&gt; Result</code>","text":"<p>The processor of the eventual value. It receives a Use callback, a Become callback, and an inner scope.</p>"},{"location":"use-async/#returns-stateobjectresult","title":"Returns <code>: StateObject&lt;Result&gt;</code>","text":"<p>A state object with the asynchronous value.</p>"},{"location":"use-camera/","title":"useCamera","text":""},{"location":"use-camera/#usecamera","title":"useCamera","text":"<pre><code>function useCamera(\n  scope: Fusion.Scope\n): StateObject&lt;Camera&gt;\n</code></pre> <p>Returns a state object with the current camera. Updates when the current camera changes.</p>"},{"location":"use-camera/#arguments","title":"Arguments","text":""},{"location":"use-camera/#scope-fusionscope","title":"scope <code>: Fusion.Scope</code>","text":"<p>The scope to store cleanup tasks.</p>"},{"location":"use-camera/#returns-stateobjectcamera","title":"Returns <code>: StateObject&lt;Camera&gt;</code>","text":"<p>A state object with the current camera.</p>"},{"location":"use-effect/","title":"useEffect","text":""},{"location":"use-effect/#useeffect","title":"useEffect","text":"<pre><code>function useEffect&lt;Scope&gt;(\n  scope: Scope &amp; Fusion.Scope,\n  callback: (Fusion.Use, Scope) -&gt; ()\n):\n</code></pre> <p>Perform side effects with state objects.</p>"},{"location":"use-effect/#arguments","title":"Arguments","text":""},{"location":"use-effect/#scope-scope-fusionscope","title":"scope <code>: Scope &amp; Fusion.Scope</code>","text":"<p>The scope to store cleanup tasks.</p>"},{"location":"use-effect/#callback-fusionuse-scope-","title":"callback <code>: (Fusion.Use, Scope) -&gt; ()</code>","text":"<p>A callback with a Use callback for tracking side effects and an inner scope scope to track cleanup tasks. This callback may not yield..</p>"},{"location":"use-event/","title":"useEvent","text":""},{"location":"use-event/#useevent","title":"useEvent","text":"<pre><code>function useEvent(\n  scope: Fusion.Scope,\n  event: EventLike,\n  listener: (...any) -&gt; ()\n): () -&gt; ()\n</code></pre> <p>Connects to an event-like object. The connection is automatically disconnected when the scope is cleaned up.</p>"},{"location":"use-event/#arguments","title":"Arguments","text":""},{"location":"use-event/#scope-fusionscope","title":"scope <code>: Fusion.Scope</code>","text":"<p>The scope to store cleanup tasks.</p>"},{"location":"use-event/#event-eventlike","title":"event <code>: EventLike</code>","text":"<p>An event-like object to connect. Can be a RBXScriptSignal, or an object   with a <code>Connect</code> or <code>connect</code> method.</p>"},{"location":"use-event/#listener-any-","title":"listener <code>: (...any) -&gt; ()</code>","text":"<p>An event listener to be connected.</p>"},{"location":"use-event/#returns-","title":"Returns <code>: () -&gt; ()</code>","text":"<p>A function to disconnect the event listener.</p>"},{"location":"use-mouse/","title":"useMouse","text":""},{"location":"use-mouse/#usemouse","title":"useMouse","text":"<pre><code>function useMouse(\n  scope: Fusion.Scope,\n  observer: (mouse: Vector2) -&gt; ()?\n): StateObject&lt;Vector2&gt;\n</code></pre> <p>Returns a state object with the mouse position. Updates when the mouse position changes.</p>"},{"location":"use-mouse/#arguments","title":"Arguments","text":""},{"location":"use-mouse/#scope-fusionscope","title":"scope <code>: Fusion.Scope</code>","text":"<p>The scope to store cleanup tasks.</p>"},{"location":"use-mouse/#observer-mouse-vector2-","title":"observer <code>: (mouse: Vector2) -&gt; ()?</code>","text":"<p>Optional observer tracking the mouse position.</p>"},{"location":"use-mouse/#returns-stateobjectvector2","title":"Returns <code>: StateObject&lt;Vector2&gt;</code>","text":"<p>A state object with the mouse position.</p>"},{"location":"use-previous/","title":"usePrevious","text":""},{"location":"use-previous/#useprevious","title":"usePrevious","text":"<pre><code>function usePrevious&lt;T&gt;(\n  scope: Scope,\n  state: StateObject&lt;T&gt;,\n  predicate: ((T, T) -&gt; boolean)?\n): StateObject&lt;T?&gt;\n</code></pre> <p>Returns a state object with the previous value of an observable state object. Initially outputs <code>nil</code>.</p>"},{"location":"use-previous/#arguments","title":"Arguments","text":""},{"location":"use-previous/#scope-scope","title":"scope <code>: Scope</code>","text":"<p>The scope to store cleanup tasks.</p>"},{"location":"use-previous/#state-stateobjectt","title":"state <code>: StateObject&lt;T&gt;</code>","text":"<p>The state object to observe for changes.</p>"},{"location":"use-previous/#predicate-t-t-boolean","title":"predicate <code>: ((T, T) -&gt; boolean)?</code>","text":"<p>The predicate function to assert if the value is newer. Defaults to Fusion's similarity rules.</p>"},{"location":"use-previous/#returns-stateobjectt","title":"Returns <code>: StateObject&lt;T?&gt;</code>","text":"<p>A state object with the previous value of the state object.</p>"},{"location":"use-previous/#example","title":"Example","text":"<pre><code>local ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\nlocal Fusion = require(ReplicatedStorage.Packages.Fusion)\nlocal fusionUtils = require(ReplicatedStorage.Packages.fusionUtils)\n\nlocal Children, Child, OnEvent = Fusion.Children, Fusion.Child, Fusion.OnEvent\n\nlocal function randomColor(): Color3\n    return Color3.fromHSV(math.random(0, 360), 0.75 0.75)\nend\n\nlocal function App(scope: Fusion.Scope&lt;typeof(Fusion) &amp; typeof(fusionUtils)&gt;)\n    local currentColor = scope:Value(randomColor())\n    local previousColor = scope:usePrevious(currentColor)\n\n    return scope:New \"Frame\" {\n        AnchorPoint = Vector2.new(0.5, 0.5),\n        Size = UDim2.fromScale(0.5, 0.5),\n        Position = UDim2.fromScale(0.5, 0.5),\n\n        [Children] = Child {\n            scope:New \"TextLabel\" {\n                Text = \"usePrevious\",\n                Size = UDim2.fromScale(1, 0.25),\n            },\n            scope:New \"TextButton\" {\n                Text = \"Next\",\n                Size = UDim2.fromScale(1, 0.25),\n                Position = UDim2.fromScale(0, 0.25),\n\n                [OnEvent \"Activated\"] = function()\n                    currentColor:set(randomColor())\n                end\n            },\n            scope:New \"Frame\" {\n                BackgroundColor3 = currentColor,\n                Size = UDim2.fromScale(0.5, 0.5),\n                Position = UDim2.fromScale(0, 0.5),\n            },\n            scope:New \"Frame\" {\n                BackgroundColor3 = scope:Computed(function(use))\n                    return use(previousColor) or Color3.new()\n                end),\n                Size = UDim2.fromScale(0.5, 0.5),\n                Position = UDim2.fromScale(0.5, 0.5),\n            }\n        }\n    }\nend\n\nreturn App\n</code></pre>"},{"location":"use-px/","title":"usePx","text":""},{"location":"use-px/#usepx","title":"usePx","text":"<pre><code>function usePx(\n  scope: Fusion.Scope,\n  baseResolution: Vector2?,\n  minimumScale: number?,\n  dominantAxis: number?\n): Px\n</code></pre> <p>Returns a state object with the current <code>px</code> unit based on the current viewport size.</p>"},{"location":"use-px/#arguments","title":"Arguments","text":""},{"location":"use-px/#scope-fusionscope","title":"scope <code>: Fusion.Scope</code>","text":"<p>The scope to store cleanup tasks.</p>"},{"location":"use-px/#baseresolution-vector2","title":"baseResolution <code>: Vector2?</code>","text":"<p>TThe base resolution to scale from, defaults to a Macbook Air's resolution.</p>"},{"location":"use-px/#minimumscale-number","title":"minimumScale <code>: number?</code>","text":"<p>The smallest scale, defaults to 50%.</p>"},{"location":"use-px/#dominantaxis-number","title":"dominantAxis <code>: number?</code>","text":"<p>The axis to scale for, defaults to 1:1.</p>"},{"location":"use-px/#returns-px","title":"Returns <code>: Px</code>","text":"<p>A <code>px</code> unit that scales with the viewport size..</p>"},{"location":"use-tagged/","title":"useTagged","text":""},{"location":"use-tagged/#usetagged","title":"useTagged","text":"<pre><code>function useTagged(\n  scope: Fusion.Scope,\n  tag: string\n): StateObject&lt;{ Instance }&gt;\n</code></pre> <p>Returns a state object with every instance of a given tag. Updates when new instances get tagged or old instances get untagged.</p>"},{"location":"use-tagged/#arguments","title":"Arguments","text":""},{"location":"use-tagged/#scope-fusionscope","title":"scope <code>: Fusion.Scope</code>","text":"<p>The scope to store cleanup tasks.</p>"},{"location":"use-tagged/#tag-string","title":"tag <code>: string</code>","text":"<p>The CollectionService tag to track.</p>"},{"location":"use-tagged/#returns-stateobject-instance","title":"Returns <code>: StateObject&lt;{ Instance }&gt;</code>","text":"<p>A state object with every instance of the given tag.</p>"},{"location":"use-tasks/","title":"useTasks","text":""},{"location":"use-tasks/#usetasks","title":"useTasks","text":"<pre><code>function useTasks&lt;Tasks...&gt;(\n  scope: Fusion.Scope,\n  ...: Tasks...\n): Tasks...\n</code></pre> <p>Add clean up tasks to the scope. Returns the clean up tasks, allowing it to be used in declarations.</p>"},{"location":"use-tasks/#arguments","title":"Arguments","text":""},{"location":"use-tasks/#scope-fusionscope","title":"scope <code>: Fusion.Scope</code>","text":"<p>The scope to store cleanup tasks.</p>"},{"location":"use-tasks/#tasks","title":"... <code>: Tasks...</code>","text":"<p>The tasks to be added.</p>"},{"location":"use-tasks/#returns-tasks","title":"Returns <code>: Tasks...</code>","text":"<p>The tasks that has been added.</p>"},{"location":"use-tasks/#example","title":"Example","text":"<pre><code>local Fusion = require(ReplicatedStorage.Packages.Fusion)\nlocal fusionUtils = require(ReplicatedStorage.Packages.fusionUtils)\n\nlocal peek = Fusion.peek\nlocal scope = Fusion:scoped(fusionUtils)\n\nlocal timeElapsed = scope:Value(0)\nlocal connection = scope:useTasks(\n  RunService.PostSimulation:Connect(function(dt)\n    timeElapsed:set(peek(timeElapsed) + dt)\n  end)\n)\n\ntask.wait(5)\nconnection:Disconnect()\nprint(`Took around {peek(timeElapsed)} seconds`)\n</code></pre>"},{"location":"use-timer/","title":"useTimer","text":""},{"location":"use-timer/#usetimer","title":"useTimer","text":"<pre><code>function useTimer(\n  scope: Fusion.Scope,\n  initial: number?\n): Timer\n</code></pre> <p>Creates a timer that can be used to track a value over time.</p>"},{"location":"use-timer/#arguments","title":"Arguments","text":""},{"location":"use-timer/#scope-fusionscope","title":"scope <code>: Fusion.Scope</code>","text":"<p>The scope to store cleanup tasks.</p>"},{"location":"use-timer/#initial-number","title":"initial <code>: number?</code>","text":"<p>The initial value of the timer.</p>"},{"location":"use-timer/#returns-timer","title":"Returns <code>: Timer</code>","text":"<p>A timer object.</p>"},{"location":"use-viewport/","title":"useViewport","text":""},{"location":"use-viewport/#useviewport","title":"useViewport","text":"<pre><code>function useViewport(\n  scope: Fusion.Scope\n): StateObject&lt;Vector2&gt;\n</code></pre> <p>Returns the current viewport size. Updates when the current camera changes or when the viewport size is changed.</p>"},{"location":"use-viewport/#arguments","title":"Arguments","text":""},{"location":"use-viewport/#scope-fusionscope","title":"scope <code>: Fusion.Scope</code>","text":"<p>The scope to store cleanup tasks.</p>"},{"location":"use-viewport/#returns-stateobjectvector2","title":"Returns <code>: StateObject&lt;Vector2&gt;</code>","text":"<p>A state object with the viewport size.</p>"}]}