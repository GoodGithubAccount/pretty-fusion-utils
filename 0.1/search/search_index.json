{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Index","text":"pretty fusion utils <ul> <li> useCleanup</li> <li> useEffect</li> <li> useEventual</li> <li> useMotion</li> <li> usePrevious</li> <li> useSpring</li> <li> useThread</li> <li> useViewport</li> <li> useCleanup</li> <li> useEffect</li> <li> useEventual</li> <li> useMotion</li> <li> usePrevious</li> <li> useSpring</li> <li> useThread</li> <li> useViewport</li> </ul> <ul> <li> useCamera</li> <li> useCoroutine</li> <li> useEventListener</li> <li> useInterval</li> <li> useMouse</li> <li> usePx</li> <li> useTagged</li> <li> useTimer</li> <li> useCamera</li> <li> useCoroutine</li> <li> useEventListener</li> <li> useInterval</li> <li> useMouse</li> <li> usePx</li> <li> useTagged</li> <li> useTimer</li> </ul>"},{"location":"#spread-the-joy-of-fusion","title":"Spread the joy of Fusion","text":"<p> <code>pretty-fusion-utils</code> is an opinionated collection of useful Fusion 0.3 utilities, borrowed from Vide and React hooks. </p> Getting Started"},{"location":"#usecamera","title":"useCamera","text":"Returns a state object with the current camera. Updates when the current camera changes."},{"location":"#usecleanup","title":"useCleanup","text":"Add clean up tasks to the scope. Returns the clean up tasks, allowing it to be used in declarations."},{"location":"#usecoroutine","title":"useCoroutine","text":"Spawns a new coroutine that is closed once the scope is cleaned up."},{"location":"#useeffect","title":"useEffect","text":"Perform side effects with state objects."},{"location":"#useeventlistener","title":"useEventListener","text":"Connects to an event-like object. The connection is automatically disconnected when the scope is cleaned up."},{"location":"#useeventual","title":"useEventual","text":"Returns a state object with an eventual value from a processor. The processor is given a Use callback that adds dependencies, a Become callback alter the current eventual value, and an inner scope to add cleanup tasks to."},{"location":"#useinterval","title":"useInterval","text":"Sets an interval that runs the callback function every `delay` seconds. If `delay` is `undefined`, the interval is cleared. If the delay changes, the the interval is cleared. If the delay changes, the interval is reset."},{"location":"#usemotion","title":"useMotion","text":"Returns a state object following a Ripple Motion along with the Motion itself."},{"location":"#usemouse","title":"useMouse","text":"Returns a state object with the mouse position. Updates when the mouse position changes."},{"location":"#useprevious","title":"usePrevious","text":"Returns a state object with the previous value of an observable state object. Initially outputs `nil`."},{"location":"#usepx","title":"usePx","text":"Returns a state object with the current `px` unit based on the current viewport size."},{"location":"#usespring","title":"useSpring","text":"Applies spring animations to the given value, and updates the goal with the latest value on every re-render. Returns a state object with the motor's value. Not to be confused with Fusion's own Spring objects."},{"location":"#usetagged","title":"useTagged","text":"Returns a state object with every instance of a given tag. Updates when new instances get tagged or old instances get untagged."},{"location":"#usethread","title":"useThread","text":"Spawns a new thread that is cancelled once the scope is cleaned up."},{"location":"#usetimer","title":"useTimer","text":"Creates a timer that can be used to track a value over time."},{"location":"#useviewport","title":"useViewport","text":"Returns the current viewport size. Updates when the current camera changes or when the viewport size is changed."},{"location":"getting-started/","title":"Getting Started","text":"<p><code>pretty-fusion-utils</code> is an opinionated collection of modern Fusion 0.3 utilities.</p> <p>This package assumes you are comfortable using Fusion, the Luau scripting language, and Roblox fundamentals. If you would like to learn, see the Fusion documentation and the Roblox creator documentation.</p>"},{"location":"getting-started/#installation","title":"Installation","text":""},{"location":"getting-started/#via-wally","title":"via Wally","text":"<ol> <li> <p>Append this to your <code>wally.toml</code> configuration:</p> <pre><code>[dependencies]\nfusionUtils = \"znotfireman/pretty-fusion-utils@0.1\"\n</code></pre> </li> <li> <p>Run <code>wally install</code> to install <code>pretty-fusion-utils</code></p> </li> <li> <p>Import <code>pretty-fusion-utils</code> into your code:</p> <pre><code>local ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\nlocal fusionUtils = require(ReplicatedStorage.Packages.fusionUtils)\n</code></pre> </li> </ol>"},{"location":"getting-started/#via-pesde","title":"via Pesde","text":"<ol> <li>Run <code>pesde add znotfireman/pretty_fusion_utils@0.1</code> to install <code>pretty-fusion-utils</code></li> <li> <p>Import <code>pretty-fusion-utils</code> into your code:</p> <pre><code>local ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\nlocal fusionUtils = require(ReplicatedStorage.packages.fusionUtils)\n</code></pre> </li> </ol>"},{"location":"getting-started/#via-roblox","title":"via Roblox","text":"<ol> <li>Visit the <code>pretty-fusion-utils</code> GitHub Releases to find the target release</li> <li>Click \"Assets\", then click <code>pretty-fusion-utils.rbxm</code> to download it</li> <li>Open Roblox Studio to import the package, preferrably within ReplicatedStorage</li> <li>Rename the package to something that can be required, such as \"fusionUtils\"</li> <li> <p>Import <code>pretty-fusion-utils</code> into your code:</p> <pre><code>local ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\nlocal fusionUtils = require(ReplicatedStorage.fusionUtils)\n</code></pre> </li> </ol>"},{"location":"getting-started/#via-source","title":"via Source","text":"<ol> <li>Clone the <code>pretty-fusion-utils</code> GitHub repository</li> <li>Install all tooling using Rokit via <code>rokit install</code></li> <li> <p>Run <code>lune run build</code>, choose not to release to Wally/Pesde when prompted:</p> <pre><code>$ lune run build\n\u2714 Create .rbxm models? \u00b7 yes\n\u2714 Release to Wally/Pesde? \u00b7 no\n</code></pre> </li> <li> <p>Copy the generated <code>dist/lib</code> folder or use the generated     <code>pretty-fusion-utils.rbxm</code> model</p> </li> </ol>"},{"location":"getting-started/#usage","title":"Usage","text":"<p><code>pretty-fusion-utils</code> can use any Fusion 0.3 package. It does not require a deep scan of a game to find Fusion 0.3. Just provide it a scope with Fusion:</p> <pre><code>local scope = Fusion:scoped()\nuseInterval(scope, 0.5, function()\n  print(\"Hello!\")\nend)\n</code></pre> <p>For convenience, <code>pretty-fusion-utils</code> can be passed into scope constructors:</p> <pre><code>local scope = Fusion:scoped(fusionUtils)\nscope:useInterval(0.5, function()\n  print(\"Hello!\")\nend)\n</code></pre> <p>Components that use <code>pretty-fusion-utils</code> can specify it as type information:</p> <pre><code>local function Button(\n  scope: Fusion.Scope&lt;typeof(Fusion) &amp; typeof(fusionUtils)&gt;,\n  props: {\n    -- ...\n  }\n)\n</code></pre>"},{"location":"getting-started/#navigation","title":"Navigation","text":"<p>Using the sidebar to the left, you can browse all of the utilities by name.</p>"},{"location":"use-camera/","title":"useCamera","text":""},{"location":"use-camera/#usecamera","title":"useCamera","text":"<pre><code>function useCamera(\n  scope: Fusion.Scope\n): Fusion.StateObject&lt;Camera&gt;\n</code></pre> <p>Returns a state object with the current camera. Updates when the current camera changes.</p>"},{"location":"use-camera/#parameters","title":"Parameters","text":""},{"location":"use-camera/#scope-fusionscope","title":"scope : Fusion.Scope","text":"<p>The scope to store cleanup tasks.</p>"},{"location":"use-camera/#returns-fusionstateobjectcamera","title":"Returns -&gt; Fusion.StateObject&lt;Camera&gt;","text":"<p>A state object with the current camera.</p>"},{"location":"use-camera/#example-usage","title":"Example Usage","text":"<pre><code>-- TODO: write example\n</code></pre>"},{"location":"use-cleanup/","title":"useCleanup","text":""},{"location":"use-cleanup/#usecleanup","title":"useCleanup","text":"<pre><code>function useCleanup&lt;Tasks...&gt;(\n  scope: Fusion.Scope,\n  ...: Tasks...\n): Tasks...\n</code></pre> <p>Add clean up tasks to the scope. Returns the clean up tasks, allowing it to be used in declarations.</p>"},{"location":"use-cleanup/#parameters","title":"Parameters","text":""},{"location":"use-cleanup/#scope-fusionscope","title":"scope : Fusion.Scope","text":"<p>The scope to store cleanup tasks.</p>"},{"location":"use-cleanup/#tasks","title":"... : Tasks...","text":"<p>The tasks to be added.</p>"},{"location":"use-cleanup/#returns-tasks","title":"Returns -&gt; Tasks...","text":"<p>The tasks that has been added.</p>"},{"location":"use-cleanup/#example-usage","title":"Example Usage","text":"<pre><code>local timeElapsed = scope:Value(0)\nlocal connection = scope:useTasks(\n  RunService.PostSimulation:Connect(function(dt)\n    timeElapsed:set(peek(timeElapsed) + dt)\n  end)\n)\n\ntask.wait(5)\nconnection:Disconnect()\nprint(`Took around {peek(timeElapsed)} seconds`)\n</code></pre>"},{"location":"use-coroutine/","title":"useCoroutine","text":""},{"location":"use-coroutine/#usecoroutine","title":"useCoroutine","text":"<pre><code>function useCoroutine&lt;Args...&gt;(\n  scope: Fusion.Scope,\n  resume: thread | (Args...) -&gt; (),\n  ...: Args...\n): thread\n</code></pre> <p>Spawns a new coroutine that is closed once the scope is cleaned up.</p>"},{"location":"use-coroutine/#parameters","title":"Parameters","text":""},{"location":"use-coroutine/#scope-fusionscope","title":"scope : Fusion.Scope","text":"<p>The scope to store clean up tasks.</p>"},{"location":"use-coroutine/#resume-thread-args-","title":"resume : thread | (Args...) -&gt; ()","text":"<p>The thread to resume, or a function to spawn.</p>"},{"location":"use-coroutine/#args","title":"... : Args...","text":"<p>The arguments to spawn the coroutine with.</p>"},{"location":"use-coroutine/#returns-thread","title":"Returns -&gt; thread","text":"<p>A thread that is closed once the scope is cleaned up.</p>"},{"location":"use-coroutine/#example-usage","title":"Example Usage","text":"<pre><code>  -- TODO: write example\n</code></pre>"},{"location":"use-effect/","title":"useEffect","text":""},{"location":"use-effect/#useeffect","title":"useEffect","text":"<pre><code>function useEffect&lt;Scope&gt;(\n  scope: Fusion.Scope&lt;S &amp; typeof(Fusion)&gt;,\n  callback: (Fusion.Use, Fusion.Scope&lt;S&gt;) -&gt; ()\n)\n</code></pre> <p>Perform side effects with state objects.</p>"},{"location":"use-effect/#parameters","title":"Parameters","text":""},{"location":"use-effect/#scope-fusionscopes-typeoffusion","title":"scope : Fusion.Scope&lt;S &amp; typeof(Fusion)&gt;","text":"<p>The scope to store cleanup tasks.</p>"},{"location":"use-effect/#callback-fusionuse-fusionscopes-","title":"callback : (Fusion.Use, Fusion.Scope&lt;S&gt;) -&gt; ()","text":"<p>A callback with a Use callback for tracking side effects and an inner scope scope to track cleanup tasks. This callback may not yield.</p>"},{"location":"use-effect/#example-usage","title":"Example Usage","text":"<pre><code>-- TODO: write example\n</code></pre>"},{"location":"use-event-listener/","title":"useEventListener","text":""},{"location":"use-event-listener/#useeventlistener","title":"useEventListener","text":"<pre><code>function useEventListener(\n  scope: Fusion.Scope,\n  event: EventLike,\n  listener: (...any) -&gt; ()\n): () -&gt; ()\n</code></pre> <p>Connects to an event-like object. The connection is automatically disconnected when the scope is cleaned up.</p>"},{"location":"use-event-listener/#parameters","title":"Parameters","text":""},{"location":"use-event-listener/#scope-fusionscope","title":"scope : Fusion.Scope","text":"<p>The scope to store cleanup tasks.</p>"},{"location":"use-event-listener/#event-eventlike","title":"event : EventLike","text":"<p>An event-like object to connect. Can be a RBXScriptSignal, or an object with a <code>Connect</code> or <code>connect</code> method.</p>"},{"location":"use-event-listener/#listener-any-","title":"listener : (...any) -&gt; ()","text":"<p>An event listener to be connected.</p>"},{"location":"use-event-listener/#returns-","title":"Returns -&gt; () -&gt; ()","text":"<p>A function to disconnect the event listener.</p>"},{"location":"use-event-listener/#example-usage","title":"Example Usage","text":"<pre><code>-- TODO: write example\n</code></pre>"},{"location":"use-eventual/","title":"useEventual","text":""},{"location":"use-eventual/#useeventual","title":"useEventual","text":"<pre><code>function useEventual&lt;T, S&gt;(\n  scope: Fusion.Scope&lt;S &amp; typeof(Fusion)&gt;,\n  fallback: T,\n  processor: (use: Fusion.Use, become: Become, scope: Fusion.Scope&lt;S&gt;) -&gt; T\n): Fusion.StateObject&lt;T&gt;\n</code></pre> <p>Returns a state object with an eventual value from a processor. The processor is given a Use callback that adds dependencies, a Become callback alter the current eventual value, and an inner scope to add cleanup tasks to.</p>"},{"location":"use-eventual/#parameters","title":"Parameters","text":""},{"location":"use-eventual/#scope-fusionscopes-typeoffusion","title":"scope : Fusion.Scope&lt;S &amp; typeof(Fusion)&gt;","text":"<p>The scope to store cleanup tasks.</p>"},{"location":"use-eventual/#fallback-t","title":"fallback : T","text":"<p>The fallback value to display while the processor runs.</p>"},{"location":"use-eventual/#processor-use-fusionuse-become-become-scope-fusionscopes-t","title":"processor : (use: Fusion.Use, become: Become, scope: Fusion.Scope&lt;S&gt;) -&gt; T","text":"<p>The processor of the eventual value. It receives a Use callback, a Become callback, and an inner scope.</p>"},{"location":"use-eventual/#returns-fusionstateobjectt","title":"Returns -&gt; Fusion.StateObject&lt;T&gt;","text":"<p>A state object with the asynchronous value.</p>"},{"location":"use-eventual/#example-usage","title":"Example Usage","text":"<pre><code>-- TODO: write example\n</code></pre>"},{"location":"use-interval/","title":"useInterval","text":""},{"location":"use-interval/#useinterval","title":"useInterval","text":"<pre><code>function useInterval&lt;S&gt;(\n  scope: Fusion.Scope&lt;S &amp; typeof(Fusion)&gt;,\n  delay: Fusion.UsedAs&lt;number?&gt;,\n  callback: (Fusion.Scope&lt;S&gt;) -&gt; (),\n  immediate: boolean?\n)\n</code></pre> <p>Sets an interval that runs the callback function every <code>delay</code> seconds. If <code>delay</code> is <code>undefined</code>, the interval is cleared. If the delay changes, the the interval is cleared. If the delay changes, the interval is reset.</p>"},{"location":"use-interval/#parameters","title":"Parameters","text":""},{"location":"use-interval/#scope-fusionscopes-typeoffusion","title":"scope : Fusion.Scope&lt;S &amp; typeof(Fusion)&gt;","text":"<p>The scope to store cleanup tasks.</p>"},{"location":"use-interval/#delay-fusionusedasnumber","title":"delay : Fusion.UsedAs&lt;number?&gt;","text":"<p>The delay, in seconds per each interval.</p>"},{"location":"use-interval/#callback-fusionscopes-","title":"callback : (Fusion.Scope&lt;S&gt;) -&gt; ()","text":"<p>The callback to run at an interval. Receives an inner scope that is cleaned up per each interval.</p>"},{"location":"use-interval/#immediate-boolean","title":"immediate : boolean?","text":"<p>Whether to spawn the callback immediately.</p>"},{"location":"use-interval/#example-usage","title":"Example Usage","text":"<pre><code>-- TODO: write example\n</code></pre>"},{"location":"use-motion/","title":"useMotion","text":""},{"location":"use-motion/#usemotion","title":"useMotion","text":"<pre><code>function useMotion&lt;T&gt;(\n  scope: Fusion.Scope,\n  initialValue: T &amp; Ripple.MotionGoal\n): (Fusion.StateObject&lt;T&gt;, Ripple.Motion&lt;T&gt;)\n</code></pre> <p>Returns a state object following a Ripple Motion along with the Motion itself.</p>"},{"location":"use-motion/#parameters","title":"Parameters","text":""},{"location":"use-motion/#scope-fusionscope","title":"scope : Fusion.Scope","text":"<p>The scope to store cleanup tasks.</p>"},{"location":"use-motion/#initialvalue-t-ripplemotiongoal","title":"initialValue : T &amp; Ripple.MotionGoal","text":"<p>The initial value of the motor.</p>"},{"location":"use-motion/#returns-fusionstateobjectt-ripplemotiont","title":"Returns -&gt; (Fusion.StateObject&lt;T&gt;, Ripple.Motion&lt;T&gt;)","text":"<p>A state object following a Ripple Motion along with the Motion itself.</p>"},{"location":"use-motion/#example-usage","title":"Example Usage","text":"<pre><code>-- TODO: write example\n</code></pre>"},{"location":"use-mouse/","title":"useMouse","text":""},{"location":"use-mouse/#usemouse","title":"useMouse","text":"<pre><code>function useMouse(\n  scope: Fusion.Scope,\n  observer: (mouse: Vector2) -&gt; ()?\n): Fusion.StateObject&lt;Vector2&gt;\n</code></pre> <p>Returns a state object with the mouse position. Updates when the mouse position changes.</p>"},{"location":"use-mouse/#parameters","title":"Parameters","text":""},{"location":"use-mouse/#scope-fusionscope","title":"scope : Fusion.Scope","text":"<p>The scope to store cleanup tasks.</p>"},{"location":"use-mouse/#observer-mouse-vector2-","title":"observer : (mouse: Vector2) -&gt; ()?","text":"<p>Optional observer tracking the mouse position.</p>"},{"location":"use-mouse/#returns-fusionstateobjectvector2","title":"Returns -&gt; Fusion.StateObject&lt;Vector2&gt;","text":"<p>A state object with the mouse position.</p>"},{"location":"use-mouse/#example-usage","title":"Example Usage","text":"<pre><code>-- TODO: write example\n</code></pre>"},{"location":"use-previous/","title":"usePrevious","text":""},{"location":"use-previous/#useprevious","title":"usePrevious","text":"<pre><code>function usePrevious&lt;T&gt;(\n  scope: Fusion.Scope,\n  state: Fusion.UsedAs&lt;T&gt;,\n  predicate: ((T, T) -&gt; boolean)?\n): Fusion.StateObject&lt;T&gt;\n</code></pre> <p>Returns a state object with the previous value of an observable state object. Initially outputs <code>nil</code>.</p>"},{"location":"use-previous/#parameters","title":"Parameters","text":""},{"location":"use-previous/#scope-fusionscope","title":"scope : Fusion.Scope","text":"<p>The scope to store cleanup tasks.</p>"},{"location":"use-previous/#state-fusionusedast","title":"state : Fusion.UsedAs&lt;T&gt;","text":"<p>The state object to observe for changes.</p>"},{"location":"use-previous/#predicate-t-t-boolean","title":"predicate : ((T, T) -&gt; boolean)?","text":"<p>The predicate function to assert if the value is newer. Defaults to Fusion's similarity rules.</p>"},{"location":"use-previous/#returns-fusionstateobjectt","title":"Returns -&gt; Fusion.StateObject&lt;T&gt;","text":"<p>A state object with the previous value of the state object. Initially outputs <code>nil</code>.</p>"},{"location":"use-previous/#example-usage","title":"Example Usage","text":"<pre><code>local function randomColor(): Color3\n  return Color3.fromHSV(math.random(0, 360), 0.75, 1)\nend\n\nlocal currentColor = scope:Value(randomColor())\nlocal previousColor = scope:usePrevious(currentColor)\n\nscope:useInterval(1, function()\n  currentColor:set(randomColor)\nend)\n\nscope:Observer(currentColor):onChange(function()\n  print(\"Current color:\", peek(currentColor), \"Previous color:\", peek(previousColor))\nend)\n</code></pre>"},{"location":"use-px/","title":"usePx","text":""},{"location":"use-px/#usepx","title":"usePx","text":"<pre><code>function usePx(\n  scope: Fusion.Scope,\n  baseResolution: Fusion.UsedAs&lt;Vector2&gt;?,\n  minimumScale: Fusion.UsedAs&lt;number&gt;?,\n  dominantAxis: Fusion.UsedAs&lt;number&gt;?\n): Px\n</code></pre> <p>Returns a state object with the current <code>px</code> unit based on the current viewport size.</p>"},{"location":"use-px/#parameters","title":"Parameters","text":""},{"location":"use-px/#scope-fusionscope","title":"scope : Fusion.Scope","text":"<p>The scope to store cleanup tasks.</p>"},{"location":"use-px/#baseresolution-fusionusedasvector2","title":"baseResolution : Fusion.UsedAs&lt;Vector2&gt;?","text":"<p>TThe base resolution to scale from, defaults to a Macbook Air's resolution.</p>"},{"location":"use-px/#minimumscale-fusionusedasnumber","title":"minimumScale : Fusion.UsedAs&lt;number&gt;?","text":"<p>The smallest scale, defaults to 50%.</p>"},{"location":"use-px/#dominantaxis-fusionusedasnumber","title":"dominantAxis : Fusion.UsedAs&lt;number&gt;?","text":"<p>The axis to scale for, defaults to 1:1.</p>"},{"location":"use-px/#returns-px","title":"Returns -&gt; Px","text":"<p>A <code>px</code> unit that scales with the viewport size.</p>"},{"location":"use-px/#example-usage","title":"Example Usage","text":"<pre><code>-- TODO: write example\n</code></pre>"},{"location":"use-spring/","title":"useSpring","text":""},{"location":"use-spring/#usespring","title":"useSpring","text":"<pre><code>function useSpring&lt;T&gt;(\n  scope: Fusion.Scope,\n  goal: Fusion.UsedAs&lt;T &amp; Ripple.MotionGoal&gt;,\n  options: Ripple.SpringOptions?\n): Fusion.StateObject&lt;T&gt;\n</code></pre> <p>Applies spring animations to the given value, and updates the goal with the latest value on every re-render. Returns a state object with the motor's value. Not to be confused with Fusion's own Spring objects.</p>"},{"location":"use-spring/#parameters","title":"Parameters","text":""},{"location":"use-spring/#scope-fusionscope","title":"scope : Fusion.Scope","text":"<p>The scope to store cleanup tasks.</p>"},{"location":"use-spring/#goal-fusionusedast-ripplemotiongoal","title":"goal : Fusion.UsedAs&lt;T &amp; Ripple.MotionGoal&gt;","text":"<p>The goal of the motor.</p>"},{"location":"use-spring/#options-ripplespringoptions","title":"options : Ripple.SpringOptions?","text":"<p>Options for the spring.</p>"},{"location":"use-spring/#returns-fusionstateobjectt","title":"Returns -&gt; Fusion.StateObject&lt;T&gt;","text":"<p>A state object with the motor's value.</p>"},{"location":"use-spring/#example-usage","title":"Example Usage","text":"<pre><code>-- TODO: write example\n</code></pre>"},{"location":"use-tagged/","title":"useTagged","text":""},{"location":"use-tagged/#usetagged","title":"useTagged","text":"<pre><code>function useTagged(\n  scope: Fusion.Scope,\n  tag: Fusion.UsedAs&lt;string&gt;\n): Fusion.StateObject&lt;{ Instance }&gt;\n</code></pre> <p>Returns a state object with every instance of a given tag. Updates when new instances get tagged or old instances get untagged.</p>"},{"location":"use-tagged/#parameters","title":"Parameters","text":""},{"location":"use-tagged/#scope-fusionscope","title":"scope : Fusion.Scope","text":"<p>The scope to store cleanup tasks.</p>"},{"location":"use-tagged/#tag-fusionusedasstring","title":"tag : Fusion.UsedAs&lt;string&gt;","text":"<p>The CollectionService tag to track.</p>"},{"location":"use-tagged/#returns-fusionstateobject-instance","title":"Returns -&gt; Fusion.StateObject&lt;{ Instance }&gt;","text":"<p>A state object with every instance of the given tag.</p>"},{"location":"use-tagged/#example-usage","title":"Example Usage","text":"<pre><code>-- TODO: write example\n</code></pre>"},{"location":"use-thread/","title":"useThread","text":""},{"location":"use-thread/#usethread","title":"useThread","text":"<pre><code>function useThread&lt;Args...&gt;(\n  scope: Fusion.Scope,\n  resume: thread | (Args...) -&gt; (),\n  ...: Args...\n): thread\n</code></pre> <p>Spawns a new thread that is cancelled once the scope is cleaned up.</p>"},{"location":"use-thread/#parameters","title":"Parameters","text":""},{"location":"use-thread/#scope-fusionscope","title":"scope : Fusion.Scope","text":"<p>The scope to store clean up tasks.</p>"},{"location":"use-thread/#resume-thread-args-","title":"resume : thread | (Args...) -&gt; ()","text":"<p>The thread to resume, or a function to spawn.</p>"},{"location":"use-thread/#args","title":"... : Args...","text":"<p>The arguments to spawn the thread with.</p>"},{"location":"use-thread/#returns-thread","title":"Returns -&gt; thread","text":"<p>A thread that is cancelled once the scope is cleaned up.</p>"},{"location":"use-thread/#example-usage","title":"Example Usage","text":"<pre><code>-- TODO: write example\n</code></pre>"},{"location":"use-timer/","title":"useTimer","text":""},{"location":"use-timer/#usetimer","title":"useTimer","text":"<pre><code>function useTimer(\n  scope: Fusion.Scope,\n  initial: number?\n): Timer\n</code></pre> <p>Creates a timer that can be used to track a value over time.</p>"},{"location":"use-timer/#parameters","title":"Parameters","text":""},{"location":"use-timer/#scope-fusionscope","title":"scope : Fusion.Scope","text":"<p>The scope to store cleanup tasks.</p>"},{"location":"use-timer/#initial-number","title":"initial : number?","text":"<p>The initial value of the timer.</p>"},{"location":"use-timer/#returns-timer","title":"Returns -&gt; Timer","text":"<p>A timer object.</p>"},{"location":"use-timer/#example-usage","title":"Example Usage","text":"<pre><code>-- TODO: write example\n</code></pre>"},{"location":"use-viewport/","title":"useViewport","text":""},{"location":"use-viewport/#useviewport","title":"useViewport","text":"<pre><code>function useViewport(\n  scope: Fusion.Scope\n): Fusion.StateObject&lt;Vector2&gt;\n</code></pre> <p>Returns the current viewport size. Updates when the current camera changes or when the viewport size is changed.</p>"},{"location":"use-viewport/#parameters","title":"Parameters","text":""},{"location":"use-viewport/#scope-fusionscope","title":"scope : Fusion.Scope","text":"<p>The scope to store cleanup tasks.</p>"},{"location":"use-viewport/#returns-fusionstateobjectvector2","title":"Returns -&gt; Fusion.StateObject&lt;Vector2&gt;","text":"<p>A state object with the viewport size.</p>"},{"location":"use-viewport/#example-usage","title":"Example Usage","text":"<pre><code>-- TODO: write example\n</code></pre>"}]}