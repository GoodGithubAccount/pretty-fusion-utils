{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Index","text":"pretty fusion utils"},{"location":"#pretty-fusion-utils","title":"pretty fusion utils","text":"<p> An opinionated collection of modern  Fusion 0.3 utilities. </p> <pre><code>fusionUtils = \"znotfireman@pretty-fusion-utils@0.1.0\"\n</code></pre> <ul> <li> useCamera</li> <li> useEffect</li> <li> useInterval</li> <li> usePrevious</li> <li> useTagged</li> <li> useThread</li> <li> useViewport</li> </ul> <ul> <li> useAsync</li> <li> useCoroutine</li> <li> useEventListener</li> <li> useMouse</li> <li> usePx</li> <li> useTasks</li> <li> useTimer</li> </ul>"},{"location":"#useasync","title":"useAsync","text":"Returns a state object with an value from an asynchronous processor. The processor is given a Use callback that adds dependencies, a Become callback alter the current eventual value, and an inner scope to add cleanup tasks to."},{"location":"#usecamera","title":"useCamera","text":"Returns a state object with the current camera. Updates when the current camera changes."},{"location":"#usecoroutine","title":"useCoroutine","text":"Spawns a new coroutine that is closed once the scope is cleaned up."},{"location":"#useeffect","title":"useEffect","text":"Perform side effects with state objects."},{"location":"#useeventlistener","title":"useEventListener","text":"Connects to an event-like object. The connection is automatically disconnected when the scope is cleaned up."},{"location":"#useinterval","title":"useInterval","text":"Sets an interval that runs the callback function every `delay` seconds. If `delay` is `undefined`, the interval is cleared. If the delay changes, the the interval is cleared. If the delay changes, the interval is reset."},{"location":"#usemouse","title":"useMouse","text":"Returns a state object with the mouse position. Updates when the mouse position changes."},{"location":"#useprevious","title":"usePrevious","text":"Returns a state object with the previous value of an observable state object. Initially outputs `nil`."},{"location":"#usepx","title":"usePx","text":"Returns a state object with the current `px` unit based on the current viewport size."},{"location":"#usetagged","title":"useTagged","text":"Returns a state object with every instance of a given tag. Updates when new instances get tagged or old instances get untagged."},{"location":"#usetasks","title":"useTasks","text":"Add clean up tasks to the scope. Returns the clean up tasks, allowing it to be used in declarations."},{"location":"#usethread","title":"useThread","text":"Spawns a new thread that is cancelled once the scope is cleaned up."},{"location":"#usetimer","title":"useTimer","text":"Creates a timer that can be used to track a value over time."},{"location":"#useviewport","title":"useViewport","text":"Returns the current viewport size. Updates when the current camera changes or when the viewport size is changed."},{"location":"use-async/","title":"useAsync","text":""},{"location":"use-async/#useasync","title":"useAsync","text":"<pre><code>function useAsync&lt;Scope, Result&gt;(\n  scope: Scope &amp; Fusion.Scope,\n  fallback: Result,\n  processor: (use: Fusion.Use, become: Become, scope: Scope) -&gt; Result\n): StateObject&lt;Result&gt;\n</code></pre> <p>Returns a state object with an value from an asynchronous processor. The processor is given a Use callback that adds dependencies, a Become callback alter the current eventual value, and an inner scope to add cleanup tasks to.</p>"},{"location":"use-async/#arguments","title":"Arguments","text":"Name Type Description scope <code>Scope &amp; Fusion.Scope</code> The scope to store cleanup tasks. fallback <code>Result</code> The fallback value to display while the processor runs. processor <code>(use: Fusion.Use, become: Become, scope: Scope) -&gt; Result</code> The processor of the eventual value. It receives a Use callback, a Become callback, and an inner scope."},{"location":"use-async/#returns","title":"Returns","text":"Type Description <code>StateObject&lt;Result&gt;</code> A state object with the asynchronous value."},{"location":"use-camera/","title":"useCamera","text":""},{"location":"use-camera/#usecamera","title":"useCamera","text":"<pre><code>function useCamera(\n  scope: Fusion.Scope\n): StateObject&lt;Camera&gt;\n</code></pre> <p>Returns a state object with the current camera. Updates when the current camera changes.</p>"},{"location":"use-camera/#arguments","title":"Arguments","text":"Name Type Description scope <code>Fusion.Scope</code> The scope to store cleanup tasks."},{"location":"use-camera/#returns","title":"Returns","text":"Type Description <code>StateObject&lt;Camera&gt;</code> A state object with the current camera."},{"location":"use-coroutine/","title":"useCoroutine","text":""},{"location":"use-coroutine/#usecoroutine","title":"useCoroutine","text":"<pre><code>function useCoroutine&lt;Args...&gt;(\n  scope: Fusion.Scope,\n  resume: thread | (Args...) -&gt; (),\n  ...: Args...\n): thread\n</code></pre> <p>Spawns a new coroutine that is closed once the scope is cleaned up.</p>"},{"location":"use-coroutine/#arguments","title":"Arguments","text":"Name Type Description scope <code>Fusion.Scope</code> The scope to store clean up tasks. resume <code>thread | (Args...) -&gt; ()</code> The thread to resume, or a function to spawn. ... <code>Args...</code> The arguments to spawn the coroutine with."},{"location":"use-coroutine/#returns","title":"Returns","text":"Type Description <code>thread</code> A thread that is closed once the scope is cleaned up."},{"location":"use-effect/","title":"useEffect","text":""},{"location":"use-effect/#useeffect","title":"useEffect","text":"<pre><code>function useEffect&lt;Scope&gt;(\n  scope: Scope &amp; Fusion.Scope,\n  callback: (Fusion.Use, Scope) -&gt; ()\n)\n</code></pre> <p>Perform side effects with state objects.</p>"},{"location":"use-effect/#arguments","title":"Arguments","text":"Name Type Description scope <code>Scope &amp; Fusion.Scope</code> The scope to store cleanup tasks. callback <code>(Fusion.Use, Scope) -&gt; ()</code> A callback with a Use callback for tracking side effects and an inner scope scope to track cleanup tasks. This callback may not yield.."},{"location":"use-event-listener/","title":"useEventListener","text":""},{"location":"use-event-listener/#useeventlistener","title":"useEventListener","text":"<pre><code>function useEventListener(\n  scope: Fusion.Scope,\n  event: EventLike,\n  listener: (...any) -&gt; ()\n): () -&gt; ()\n</code></pre> <p>Connects to an event-like object. The connection is automatically disconnected when the scope is cleaned up.</p>"},{"location":"use-event-listener/#arguments","title":"Arguments","text":"Name Type Description scope <code>Fusion.Scope</code> The scope to store cleanup tasks. event <code>EventLike</code> An event-like object to connect. Can be a RBXScriptSignal, or an object with a <code>Connect</code> or <code>connect</code> method. listener <code>(...any) -&gt; ()</code> An event listener to be connected."},{"location":"use-event-listener/#returns","title":"Returns","text":"Type Description <code>() -&gt; ()</code> A function to disconnect the event listener."},{"location":"use-interval/","title":"useInterval","text":""},{"location":"use-interval/#useinterval","title":"useInterval","text":"<pre><code>function useInterval&lt;S&gt;(\n  scope: Scope&lt;S &amp; typeof(Fusion)&gt;,\n  delay: UsedAs&lt;number?&gt;,\n  callback: (Scope&lt;S&gt;) -&gt; (),\n  immediate: boolean?\n)\n</code></pre> <p>Sets an interval that runs the callback function every <code>delay</code> seconds. If <code>delay</code> is <code>undefined</code>, the interval is cleared. If the delay changes, the the interval is cleared. If the delay changes, the interval is reset.</p>"},{"location":"use-interval/#arguments","title":"Arguments","text":"Name Type Description scope <code>Scope&lt;S &amp; typeof(Fusion)&gt;</code> The scope to store cleanup tasks. delay <code>UsedAs&lt;number?&gt;</code> The delay, in seconds per each interval. callback <code>(Scope&lt;S&gt;) -&gt; ()</code> The callback to run at an interval. Receives an inner scope that is cleaned up per each interval. immediate <code>boolean?</code> Whether to spawn the callback immediately."},{"location":"use-mouse/","title":"useMouse","text":""},{"location":"use-mouse/#usemouse","title":"useMouse","text":"<pre><code>function useMouse(\n  scope: Fusion.Scope,\n  observer: (mouse: Vector2) -&gt; ()?\n): StateObject&lt;Vector2&gt;\n</code></pre> <p>Returns a state object with the mouse position. Updates when the mouse position changes.</p>"},{"location":"use-mouse/#arguments","title":"Arguments","text":"Name Type Description scope <code>Fusion.Scope</code> The scope to store cleanup tasks. observer <code>(mouse: Vector2) -&gt; ()?</code> Optional observer tracking the mouse position."},{"location":"use-mouse/#returns","title":"Returns","text":"Type Description <code>StateObject&lt;Vector2&gt;</code> A state object with the mouse position."},{"location":"use-previous/","title":"usePrevious","text":""},{"location":"use-previous/#useprevious","title":"usePrevious","text":"<pre><code>function usePrevious&lt;T&gt;(\n  scope: Scope,\n  state: StateObject&lt;T&gt;,\n  predicate: ((T, T) -&gt; boolean)?\n): StateObject&lt;T?&gt;\n</code></pre> <p>Returns a state object with the previous value of an observable state object. Initially outputs <code>nil</code>.</p>"},{"location":"use-previous/#arguments","title":"Arguments","text":"Name Type Description scope <code>Scope</code> The scope to store cleanup tasks. state <code>StateObject&lt;T&gt;</code> The state object to observe for changes. predicate <code>((T, T) -&gt; boolean)?</code> The predicate function to assert if the value is newer. Defaults to Fusion's similarity rules."},{"location":"use-previous/#returns","title":"Returns","text":"Type Description <code>StateObject&lt;T?&gt;</code> A state object with the previous value of the state object."},{"location":"use-previous/#example","title":"Example","text":"<pre><code>local ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\nlocal Fusion = require(ReplicatedStorage.Packages.Fusion)\nlocal fusionUtils = require(ReplicatedStorage.Packages.fusionUtils)\n\nlocal Children, Child, OnEvent = Fusion.Children, Fusion.Child, Fusion.OnEvent\n\nlocal function randomColor(): Color3\n    return Color3.fromHSV(math.random(0, 360), 0.75 0.75)\nend\n\nlocal function App(scope: Fusion.Scope&lt;typeof(Fusion) &amp; typeof(fusionUtils)&gt;)\n    local currentColor = scope:Value(randomColor())\n    local previousColor = scope:usePrevious(currentColor)\n\n    return scope:New \"Frame\" {\n        AnchorPoint = Vector2.new(0.5, 0.5),\n        Size = UDim2.fromScale(0.5, 0.5),\n        Position = UDim2.fromScale(0.5, 0.5),\n\n        [Children] = Child {\n            scope:New \"TextLabel\" {\n                Text = \"usePrevious\",\n                Size = UDim2.fromScale(1, 0.25),\n            },\n            scope:New \"TextButton\" {\n                Text = \"Next\",\n                Size = UDim2.fromScale(1, 0.25),\n                Position = UDim2.fromScale(0, 0.25),\n\n                [OnEvent \"Activated\"] = function()\n                    currentColor:set(randomColor())\n                end\n            },\n            scope:New \"Frame\" {\n                BackgroundColor3 = currentColor,\n                Size = UDim2.fromScale(0.5, 0.5),\n                Position = UDim2.fromScale(0, 0.5),\n            },\n            scope:New \"Frame\" {\n                BackgroundColor3 = scope:Computed(function(use))\n                    return use(previousColor) or Color3.new()\n                end),\n                Size = UDim2.fromScale(0.5, 0.5),\n                Position = UDim2.fromScale(0.5, 0.5),\n            }\n        }\n    }\nend\n\nreturn App\n</code></pre>"},{"location":"use-px/","title":"usePx","text":""},{"location":"use-px/#usepx","title":"usePx","text":"<pre><code>function usePx(\n  scope: Fusion.Scope,\n  baseResolution: Vector2?,\n  minimumScale: number?,\n  dominantAxis: number?\n): Px\n</code></pre> <p>Returns a state object with the current <code>px</code> unit based on the current viewport size.</p>"},{"location":"use-px/#arguments","title":"Arguments","text":"Name Type Description scope <code>Fusion.Scope</code> The scope to store cleanup tasks. baseResolution <code>Vector2?</code> TThe base resolution to scale from, defaults to a Macbook Air's resolution. minimumScale <code>number?</code> The smallest scale, defaults to 50%. dominantAxis <code>number?</code> The axis to scale for, defaults to 1:1."},{"location":"use-px/#returns","title":"Returns","text":"Type Description <code>Px</code> A <code>px</code> unit that scales with the viewport size.."},{"location":"use-tagged/","title":"useTagged","text":""},{"location":"use-tagged/#usetagged","title":"useTagged","text":"<pre><code>function useTagged(\n  scope: Fusion.Scope,\n  tag: string\n): StateObject&lt;{ Instance }&gt;\n</code></pre> <p>Returns a state object with every instance of a given tag. Updates when new instances get tagged or old instances get untagged.</p>"},{"location":"use-tagged/#arguments","title":"Arguments","text":"Name Type Description scope <code>Fusion.Scope</code> The scope to store cleanup tasks. tag <code>string</code> The CollectionService tag to track."},{"location":"use-tagged/#returns","title":"Returns","text":"Type Description <code>StateObject&lt;{ Instance }&gt;</code> A state object with every instance of the given tag."},{"location":"use-tasks/","title":"useTasks","text":""},{"location":"use-tasks/#usetasks","title":"useTasks","text":"<pre><code>function useTasks&lt;Tasks...&gt;(\n  scope: Fusion.Scope,\n  ...: Tasks...\n): Tasks...\n</code></pre> <p>Add clean up tasks to the scope. Returns the clean up tasks, allowing it to be used in declarations.</p>"},{"location":"use-tasks/#arguments","title":"Arguments","text":"Name Type Description scope <code>Fusion.Scope</code> The scope to store cleanup tasks. ... <code>Tasks...</code> The tasks to be added."},{"location":"use-tasks/#returns","title":"Returns","text":"Type Description <code>Tasks...</code> The tasks that has been added."},{"location":"use-tasks/#example","title":"Example","text":"<pre><code>local Fusion = require(ReplicatedStorage.Packages.Fusion)\nlocal fusionUtils = require(ReplicatedStorage.Packages.fusionUtils)\n\nlocal peek = Fusion.peek\nlocal scope = Fusion:scoped(fusionUtils)\n\nlocal timeElapsed = scope:Value(0)\nlocal connection = scope:useTasks(\n  RunService.PostSimulation:Connect(function(dt)\n    timeElapsed:set(peek(timeElapsed) + dt)\n  end)\n)\n\ntask.wait(5)\nconnection:Disconnect()\nprint(`Took around {peek(timeElapsed)} seconds`)\n</code></pre>"},{"location":"use-thread/","title":"useThread","text":""},{"location":"use-thread/#usethread","title":"useThread","text":"<pre><code>function useThread&lt;Args...&gt;(\n  scope: Fusion.Scope,\n  resume: thread | (Args...) -&gt; (),\n  ...: Args...\n): thread\n</code></pre> <p>Spawns a new thread that is cancelled once the scope is cleaned up.</p>"},{"location":"use-thread/#arguments","title":"Arguments","text":"Name Type Description scope <code>Fusion.Scope</code> The scope to store clean up tasks. resume <code>thread | (Args...) -&gt; ()</code> The thread to resume, or a function to spawn. ... <code>Args...</code> The arguments to spawn the thread with."},{"location":"use-thread/#returns","title":"Returns","text":"Type Description <code>thread</code> A thread that is cancelled once the scope is cleaned up."},{"location":"use-timer/","title":"useTimer","text":""},{"location":"use-timer/#usetimer","title":"useTimer","text":"<pre><code>function useTimer(\n  scope: Fusion.Scope,\n  initial: number?\n): Timer\n</code></pre> <p>Creates a timer that can be used to track a value over time.</p>"},{"location":"use-timer/#arguments","title":"Arguments","text":"Name Type Description scope <code>Fusion.Scope</code> The scope to store cleanup tasks. initial <code>number?</code> The initial value of the timer."},{"location":"use-timer/#returns","title":"Returns","text":"Type Description <code>Timer</code> A timer object."},{"location":"use-viewport/","title":"useViewport","text":""},{"location":"use-viewport/#useviewport","title":"useViewport","text":"<pre><code>function useViewport(\n  scope: Fusion.Scope\n): StateObject&lt;Vector2&gt;\n</code></pre> <p>Returns the current viewport size. Updates when the current camera changes or when the viewport size is changed.</p>"},{"location":"use-viewport/#arguments","title":"Arguments","text":"Name Type Description scope <code>Fusion.Scope</code> The scope to store cleanup tasks."},{"location":"use-viewport/#returns","title":"Returns","text":"Type Description <code>StateObject&lt;Vector2&gt;</code> A state object with the viewport size."}]}